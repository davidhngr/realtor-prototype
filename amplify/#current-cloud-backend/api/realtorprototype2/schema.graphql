type House
  @model
  @searchable
  @auth(
    rules: [
      { allow: owner }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  address: String!
  description: String
  area: Int
  beds: Int
  baths: Int
  city: String!
  latitude: Float!
  longitude: Float!
  price: Int!
  state: String!
  photo: [String!]
  keyDetails: AWSJSON
  ownerID: ID!
  owner: User @connection(fields: ["ownerID"])
  favoritedBy: [Favorite] @connection(keyName: "byHouses", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User @model {
  id: ID!
  name: String!
  email: AWSEmail!
  photo: String
  favorite: [Favorite] @connection(keyName: "byUsers", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Favorite
  @model
  @key(name: "byHouses", fields: ["houseID", "userID"])
  @key(name: "byUsers", fields: ["userID", "houseID"]) {
  id: ID!
  houseID: ID!
  userID: ID!
  house: House! @connection(fields: ["houseID"])
  user: User! @connection(fields: ["userID"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Conversation @model {
  id: ID!
  senderID: ID!
  sender: User! @connection(fields: ["senderID"])
  receiverID: ID!
  receiver: User! @connection(fields: ["receiverID"])
  lastMessageID: ID!
  lastMessage: Message! @connection(fields: ["lastMessageID"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message
  @model
  @key(
    name: "messagesByDate"
    fields: ["conversationID", "createdAt"]
    queryField: "messagesByDate"
  ) {
  id: ID!
  conversationID: ID!
  senderID: ID!
  message: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}
